extern mod sdl;
extern mod std;

use core::rand::RngUtil;
use core::libc::uint32_t;
use core::comm::{stream, PortSet};
use std::timer::sleep;
use std::uv;
use sdl::video::{Color};

struct PixelResult {
  x: int,
  y: int,
  color: Color
}

enum Result {
  Timer,
  Pixel(PixelResult),
  WorkerDone
}

fn main() {
  let iotask = ~uv::global_loop::get();
  let width = 800;
  let height = 600;
  let max_workers = 2;
  let mut workers = max_workers;

  do sdl::start {
    sdl::init([sdl::InitVideo]);
    sdl::wm::set_caption("raytracer", "raytracer");
    let ps = PortSet();
    let (timer_p, timer_c) = stream();
    ps.add(timer_p);
    let mut running = true;

    let screen = match sdl::video::set_video_mode(width, height, 32, [sdl::video::HWSurface],
                                                              [sdl::video::DoubleBuf]) {
      Ok(screen) => screen,
      Err(err) => fail!(fmt!("failed to set video mode: %s", err))
    };

    do spawn {
      loop {
        sleep(~uv::global_loop::get(), 100);
        timer_c.send(Timer);
      }
    }

    let block_size = height / max_workers;
    for int::range(0, max_workers) |worker| {
      println(fmt!("%d", worker));
      // 600 / 1 = 600 : 0 -> 600
      // 600 / 2 = 300 : 0 -> 300, 300 -> 600
      // 600 / 3 = 200 : 0 -> 200, 200 -> 400, 400 -> 600
      let (port, chan) = stream();
      do spawn {
        let rng = rand::Rng();
        for int::range(worker * block_size, (worker + 1) * block_size) |y| {
          for int::range(0, width) |x| {
            chan.send(Pixel(PixelResult {x: x as int, y: y as int, color: rng.gen::<Color>()}));
          }
        }
        chan.send(WorkerDone);
      }
      ps.add(port);
    };

    loop main: {
      loop event: {
        match sdl::event::poll_event() {
          sdl::event::QuitEvent => break main,
          sdl::event::NoEvent => break event,
          _ => {}
        }
      }
      if(running) {
        screen.with_lock(|pixels| {
          unsafe {
            let pixels: &mut [uint32_t] = cast::transmute(pixels);
            let pitch = ((*screen.raw).pitch) as int;
            let format = ((*screen.raw).format);
            let mut frame = true;
            while(frame && running) {
              running = match ps.try_recv() {
                None => {
                  println("Done!");
                  false
                },
                Some(Pixel(pixel)) => {
                  pixels[pixel.y * pitch / 4 + pixel.x] = pixel.color.to_mapped(format);
                  true
                },
                Some(Timer()) => {
                  frame = false;
                  true
                },
                Some(WorkDone()) => {
                  println("A worker is done!");
                  true
                }
              };
            }
          }
        });
        screen.flip();
      }
      if !running {
        break main;
      }
      else {
        sleep(iotask, 33);
      }
    }

    sdl::quit();
  }
}
